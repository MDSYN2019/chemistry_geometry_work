"""
Trying to figure out what featurizers are with datamol
"""

# https://www.rustworkx.org/tutorial/introduction.html

import os
import datamol as dm
import pandas as pd
from dataclasses import dataclass, field
from math import asin, cos, radians, sin, sqrt
from typing import Any

import asyncpg
import asyncio

"""
The dataclasses module in python simplifies the creation of clasess
used primarily for storing data. While regular classes can be used for
the same purpose, dataclasses offer built-in functionality
like automatic __init__, __repr__, __eq__ .

--- General notes on chemiinformatics ---

*Smiles* - stand for simplified molecular input line entry system and the name essentially describes it.
It's a line notation for encoding molecular structures where atoms are represented by their standard abreviation
as a chemical element. Multiple symbols are then used to defined with charges, bonds, rings, aromaticity, stoerochemistry
and much more


*Selfies* - Stands for self references embedded strings. It is another string based representaion for molecules that is generally more suitable for Ml models
and exhibits for ML models and exhbits more robustness


*InChi* - Another string based method of representing chemical structures developed by IUPAC.


--- Molecular Descriptors ---


Molecular descriptors can be defined as mathematical representatiosn of molecule's properties
that are generated by algorithms. The numerical values of molecular descriptors are used quantitively
describe the physical and chemical information of the molecules

"""


async def connect_to_db(default_query: str = "SELECT * FROM raw_data"):
    """
    Connect to the rdkit cartidge database
    """
    pool = await asyncpg.create_pool(
        user=os.environ["PGUSER"],
        password=os.environ["PGPASSWORD"],
        database="emolecules",
        host="localhost",
        port=5432,
        min_size=1,  # Minimum connections
        max_size=10,  # Maximum connections
    )
    async with pool.acquire() as conn:
        result = await conn.fetch(default_query)
        return result

    await pool.close()


async def execute_molecular_filter(
    smiles_query: str = "SELECT id, structure FROM molecules WHERE structure@>'c1cccnc1' LIMIT 100;",
) -> None:
    """
    Run another query where we want to find a substructure of pyridine within the molecules smiles
    """
    results = await connect_to_db(smiles_query)
    if results:
        return results

async def list_tables():
    result= await connect_to_db("SELECT table_schema, table_name FROM from information_schema.tables")
    for row in result:
        print(dict(row))
        

def preprocess_postgres_cartridge() -> pd.DataFrame:
    """
    load data from the data cartridge, and create a pandas table from it
    """
    cartridge_result = asyncio.run(execute_molecular_filter())
    output_data = [value.values() for value in cartridge_result]
    pd_cartridge_result = pd.DataFrame(output_data, columns=["id", "structure"])
    return pd_cartridge_result


def datamol_clean_cartridge() -> pd.DataFrame:
    """ """
    dataframe = preprocess_postgres_cartridge()
    dataframe["mol"] = dataframe["structure"].apply(dm.to_mol)
    return dataframe


def filter_scaffolds() -> None:
    """ """
    pass


@dataclass
class EMolculeConnect:
    smiles_column: str
    data: pd.DataFrame = field(
        default_factory=dm.data.freesolv()
    )  # The default value is to get the freesolvation values

    def _preprocess(self, row):
        mol = dm.to_mol(row[self.smiles_column], ordered=True)
        mol = dm.fix_mol(mol)
        mol = dm.sanitize_mol(mol, sanifix=True, charge_neutral=False)
        mol = dm.standardize_mol(
            mol,
            disconnect_metals=False,
            normalize=True,
            reionize=True,
            uncharge=False,
            stereo=True,
        )

        row["standard_smiles"] = dm.standardize_smiles(dm.to_smiles(mol))
        row["selfies"] = dm.to_selfies(mol)
        row["inchi"] = dm.to_inchi(mol)
        row["inchikey"] = dm.to_inchikey(mol)
        return row

    def _preprocess_postgres_cartridge(self):
        """
        load data from the data cartridge, and create a pandas table from it
        """
        cartridge_result = asyncio.run(execute_molecular_filter())
        output_data = [value.values() for value in cartridge_result]

@dataclass
class Position:
    name: str
    lon: float = 0.0
    lat: float = 0.0

    def distance_to(self, other):
        """ """
        r = 6371
        lam_1, lam_2 = radians(self.lon), radians(other.lon)
        phi_1, phi_2 = radians(self.lat), radians(other.lat)
        h = (sin((phi_2 - phi_1) / 2)) ** 2 + cos(phi_1) * cos(phi_2) * sin(
            (lam_2 - lam_1) ** 2
        )
        return 2 * r * asin(sqrt(h))

if __name__ == "__main__":
    pandas_result = datamol_clean_cartridge()
    print(pandas_result)
